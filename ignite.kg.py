import logging
import re
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)

# üîê –¢–æ–∫–µ–Ω –∏ ID –≥—Ä—É–ø–ø—ã
BOT_TOKEN = "7452262699:AAFbZZYaWW3eBNgAEVKyLgCjphPgrLJNWAs"
GROUP_CHAT_ID = -1002616109064

# üõç –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
products = {
    "Blubery ice - –ß–µ—Ä–Ω–∏–∫–∞ —Å–æ –ª—å–¥–æ–º": {"price": 1300, "desc": "–Ω–∏–∫–æ—Ç–∏–Ω: 5% \n –ó–∞—Ç—è–∂–µ–∫: 5000"},
    "Blue Raspberry ice - –ì–æ–ª—É–±–∞—è –º–∞–ª–∏–Ω–∞": {"price": 1300, "desc": "–Ω–∏–∫–æ—Ç–∏–Ω: 5% \n –ó–∞—Ç—è–∂–µ–∫: 5000"},
    "Green Apple - –ó–µ–ª–µ–Ω–∞—è —è–±–ª–æ–∫–æ": {"price": 1300, "desc": "–Ω–∏–∫–æ—Ç–∏–Ω: 5% \n –ó–∞—Ç—è–∂–µ–∫: 5000"},
    "Mixed Berries - –Ø–≥–æ–¥–Ω—ã–π –ú–∏–∫—Å": {"price": 1300, "desc": "–Ω–∏–∫–æ—Ç–∏–Ω: 5% \n –ó–∞—Ç—è–∂–µ–∫: 5000"},
    "Menthol - –ú–µ–Ω—Ç–æ–ª –º—è—Ç–∞": {"price": 1300, "desc": "–Ω–∏–∫–æ—Ç–∏–Ω: 5% \n –ó–∞—Ç—è–∂–µ–∫: 5000"},
    "Strawberry banana - –ö–ª—É–±–Ω–∏–∫–∞ –ë–∞–Ω–∞–Ω": {"price": 1300, "desc": "–Ω–∏–∫–æ—Ç–∏–Ω: 5% \n –ó–∞—Ç—è–∂–µ–∫: 5000"},
    "Aloe Grape - –ê–ª–æ–µ –í–∏–Ω–æ–≥—Ä–∞–¥": {"price": 1300, "desc": "–Ω–∏–∫–æ—Ç–∏–Ω: 5% \n –ó–∞—Ç—è–∂–µ–∫: 5000"},
    "Watermelon Mix - –ê—Ä–±—É–∑–Ω—ã–π –ú–∏–∫—Å": {"price": 1300, "desc": "–Ω–∏–∫–æ—Ç–∏–Ω: 5% \n –ó–∞—Ç—è–∂–µ–∫: 5000"},
    "Peach Raspberry - –ü–µ—Ä—Å–∏–∫ –º–∞–ª–∏–Ω–∞": {"price": 1300, "desc": "–Ω–∏–∫–æ—Ç–∏–Ω: 5% \n –ó–∞—Ç—è–∂–µ–∫: 5000"},
    "Blue Dream": {"price": 1700, "desc": "–Ω–∏–∫–æ—Ç–∏–Ω: 5% \n –ó–∞—Ç—è–∂–µ–∫: 5000"}
}

PHONE_REGEX = re.compile(r"^\+?\d{9,15}$")
logging.basicConfig(level=logging.INFO)

# /start ‚Äî —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞—á–∞—Ç—å –∑–∞–∫–∞–∑"
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    context.user_data["cart"] = {}
    keyboard = [[InlineKeyboardButton("üõç –ù–∞—á–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="restart")]]
    markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:",
            reply_markup=markup
        )
    elif update.callback_query:
        await update.callback_query.edit_message_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:",
            reply_markup=markup
        )

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
async def show_product_list(reply_func):
    keyboard = [
        [InlineKeyboardButton(name, callback_data=f"select:{name}")]
        for name in products
    ]
    keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="done")])
    markup = InlineKeyboardMarkup(keyboard)
    await reply_func(
        "üõç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã (–ø–æ –æ–¥–Ω–æ–º—É), –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä':",
        reply_markup=markup
    )

# –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ ‚Üí –±–æ—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
async def select_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    product = query.data.split("select:")[1]
    context.user_data["current_product"] = product

    keyboard = [
        [InlineKeyboardButton(f"{i} —à—Ç", callback_data=f"qty:{i}")]
        for i in range(1, 6)
    ]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_list")])
    markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        f"üì¶ {product}\nüìù {products[product]['desc']}\nüí∞ {products[product]['price']} —Å–æ–º\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:",
        reply_markup=markup
    )

# –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤
async def back_to_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await show_product_list(query.edit_message_text)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
async def quantity_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    qty = int(query.data.split("qty:")[1])
    product = context.user_data["current_product"]

    cart = context.user_data.get("cart", {})
    cart[product] = qty
    context.user_data["cart"] = cart
    context.user_data.pop("current_product", None)

    await show_product_list(query.edit_message_text)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ ‚Üí –∑–∞–ø—Ä–æ—Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def done_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if not context.user_data.get("cart"):
        await query.edit_message_text("‚ùå –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.")
        return

    context.user_data["awaiting_phone"] = True
    await query.edit_message_text("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∞–¥—Ä–µ—Å–∞
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if context.user_data.get("awaiting_phone"):
        if not PHONE_REGEX.match(text):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü—Ä–∏–º–µ—Ä: +996XXXXXXXXX")
            return
        context.user_data["phone"] = text
        context.user_data["awaiting_phone"] = False
        context.user_data["awaiting_address"] = True
        await update.message.reply_text("üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: \n \n P.S. –î–æ—Å—Ç–∞–≤–∫–∞ –ø–ª–∞—Ç–Ω–∞—è, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¢—Ä–∞—Ñ–∏–∫–∞ –Ø–Ω–¥–µ–∫—Åüöï")
        return

    elif context.user_data.get("awaiting_address"):
        context.user_data["address"] = text
        context.user_data["awaiting_address"] = False
        await confirm_order(update, context)
        return

    else:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ —Å –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ —á–µ—Ä–µ–∑ /start.")

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cart = context.user_data.get("cart", {})
    phone = context.user_data.get("phone")
    address = context.user_data.get("address")

    if not cart:
        await update.message.reply_text("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    order_lines = []
    total = 0
    for product, qty in cart.items():
        price = products[product]["price"]
        line = f"‚Ä¢ {product} ‚Äî {qty} —à—Ç √ó {price} —Å–æ–º = {qty * price} —Å–æ–º"
        order_lines.append(line)
        total += qty * price

    cart_text = "\n".join(order_lines)
    summary = (
        f"üìù –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑:\n\n"
        f"{cart_text}\n"
        f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total} —Å–æ–º\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üìç –ê–¥—Ä–µ—Å: {address}"
    )

    keyboard = [[InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="final_confirm")]]
    await update.message.reply_text(summary, reply_markup=InlineKeyboardMarkup(keyboard))

# –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É
async def final_confirm_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    cart = context.user_data.get("cart", {})
    phone = context.user_data.get("phone")
    address = context.user_data.get("address")
    user = update.effective_user

    if not cart or not phone or not address:
        await query.edit_message_text("‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.")
        return

    total = 0
    order_lines = []
    for product, qty in cart.items():
        price = products[product]["price"]
        line = f"‚Ä¢ {product} ‚Äî {qty} —à—Ç √ó {price} —Å–æ–º = {qty * price} —Å–æ–º"
        order_lines.append(line)
        total += qty * price

    order_summary = "\n".join(order_lines)
    msg = (
        f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n"
        f"üë§ @{user.username or user.first_name} (ID: {user.id})\n"
        f"{order_summary}\n"
        f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total} —Å–æ–º\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üìç –ê–¥—Ä–µ—Å: {address}"
    )
    await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=msg)

    await query.edit_message_text("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –°–∫–æ—Ä–æ –º—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.")

    keyboard = [[InlineKeyboardButton("üõç –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data="restart")]]
    await context.bot.send_message(chat_id=query.message.chat.id, text="–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑?", reply_markup=InlineKeyboardMarkup(keyboard))

    context.user_data.clear()

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–∫–∞–∑–∞
async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data.clear()
    context.user_data["cart"] = {}
    await show_product_list(query.edit_message_text)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(select_product, pattern="^select:"))
    app.add_handler(CallbackQueryHandler(quantity_selected, pattern="^qty:"))
    app.add_handler(CallbackQueryHandler(back_to_list, pattern="^back_to_list$"))
    app.add_handler(CallbackQueryHandler(done_selection, pattern="^done$"))
    app.add_handler(CallbackQueryHandler(final_confirm_handler, pattern="^final_confirm$"))
    app.add_handler(CallbackQueryHandler(restart, pattern="^restart$"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

if __name__ == "__main__":
    main()
